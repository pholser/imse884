LP background
=====
max z_LP = c^T * x
s.t. Ax <= b
     x >= 0

c, x in R^n
A in R^(m x n)
b in R^(m x 1)

Integer program:
max z_IP = c^T * x
s.t. Ax <= b
     x in Z^n_+   (x >= 0 and integer)

c in R^n
A in R^(m x n)
b in R^(m x 1)

Is there a relationship between z_LP and z_IP?
z_LP >= z_IP

In general, no poly-time algo to solve an IP.

Treat the LP as a linear relaxation of the IP
(remove the integrality restrictions).

e.g.
max 5x_1 + 2x_2
s.t. 3x_1 + x_2  <= 10
     2x_1 + 3x_2 <=  8
     x_1, x_2 >= 0 and integer

Linear relaxation:
max 5x_1 + 2x_2
s.t. 3x_1 + x_2  <= 10
     2x_1 + 3x_2 <=  8
     x_1, x_2 >= 0

Convex problems easy to solve; non-convex
problems not so much.

-- Convexity of function
    f(x) is convex
    <->
    forall x_1, x_2 in dom(f), forall lambda in [0, 1]:
        f(lambda * x_1 + (1 - lambda) * x_2)
        <=
        lambda * f(x_1) + (1 - lambda) * f(x_2)

-- Convexity of set
    S subset-of R^n is convex
    <->
    forall x_1, x_2 in S, forall lambda in [0, 1]:
        lambda * x_1 + (1 - lambda) * x_2 in S

-- feasible region of an LP is a convex set;
    IP not so much, unless:
    -- feasible region is a singular point
    -- feasible region is empty set

The convex hull of S is the intersection of all
convex sets that contain S.

Can the linear relaxation of an IP be feasible,
but the IP infeasible?
--> max x_1 + x_2
    s.t. x_1 <= 1/2
         x_1 >= 1/4
    (linear relaxation unbounded here.)
--> narrow triangle that never contains integer points

Extreme points of feasible region of LP:
-- If there is an optimum, it's at a corner point
   -- As long as LP not infeasible or unbounded
-- Also called basic feasible solutions (BFS)

Degeneracy:
-- > 1 basis corresponding to a single BFS
-- One of the basic vars takes zero
    (or takes on lower/upper bound of var)

Degeneracy created by:
-- Redundant constraints
-- > n hyperplanes meeting at a point in n
    dimensions

Simplex method: move from corner to corner,
till optimum found.

e.g. max 5x_1 + 3x_2
     s.t. x_1 <= 4
          -x_1 + x_2 <= 6
          3x_1 + 2x_2 <= 18
          x_1, x_2 >= 0

z   x_1   x_2   s_1   s_2   s_3    RHS
--------------------------------------
1    -5    -3     0     0     0      0
0     1     0     1     0     0      4  s_1
0    -1     1     0     1     0      6  s_2
0     3     2     0     0     1     18  s_3

x_1 leaves
s_1 enters: 4/1 min

z   x_1   x_2   s_1   s_2   s_3    RHS
--------------------------------------
1     0    -3     5     0     0     20
0     1     0     1     0     0      4  x_1
0     0     1     1     1     0     10  s_2
0     0     2    -3     0     1      6  s_3

x_2 leaves
s_3 enters: 6/2 min

z   x_1   x_2   s_1   s_2   s_3    RHS
--------------------------------------
1     0     0    1/2    0   3/2     29
0     1     0     1     0     0      4  x_1
0     0     0    5/2    1   -1/2     7  s_2
0     0     1   -3/2    0    1/2     3  x_2

z* = 29, x_1 = 4, x_2 = 3, s_2 = 3/2, s_1 = 0, s_3 = 0

If this were an IP, and we ended up with a non-integer
soln, we'd need to cut the space down.

Add a constraint: x_1 + x_2 <= 5
Re-solve as LP
Add constraint to tableau
Re-establish basis...
Check optimal; if not, pivot, maybe dual simplex


Duality in LP
=====

primal:
e.g.
max c^T * x
s.t. Ax <= b
     x >= 0

dual:
min b^T * y
s.t. A^T * y >= c
    y >= 0

c^T * x <= b^T * y   # weak duality

Strong duality theorem:
If there is an optimum to the primal,
there is an optimum to the dual, and
    c^T * x^* = b^T * y^*

Complementary slackness:
For a corner-point soln:
If x_i is basic, e_i is non-basic
    (e = surplus var)
If s_i is basic, y_i is non-basic
    (s = slack var)

    x * e = 0
    s * y = 0

Reduced costs/shadow prices/dual prices: values in
objective row of simplex tableau above the slacks

Sensitivity analysis

Better off with simplex method on linear relaxations
of IP, as opposed to interior-point methods
(why?)

Simplex may require exponential time in pathological
cases.
There are polynomial-time algos for LP now
(interior-point methods)

if A then B:
T     T   -->  T  # Assume A true; show B must be true
T     F   -->  F
F     T   -->  T
F     F   -->  T

A iff B:
T     T   -->  T  # Assume A true; show B must be true
T     F   -->  F
F     T   -->  F
F     F   -->  T  # Assume B true; show A must be true

Proof by contradiction of "if A then B":
-- Assume A is true; assume B is false.
-- What follows from this? Need to show that
    this leads to a contradiction, and so B
    must be true

Contrapositive: if ~B, then ~A
(A -> B is equivalent to ~B -> ~A)

Converse: if B, then A
Inverse: if ~A, then ~B


Graph: set G = (V, E)
V = vertices, E = edges

Directed edges or undirected edges

Graph as substructure for building an IP

Node-node adjacency matrix representation
(A[x, y] = 1 if nodes x and y are connected via
an edge, else ___? (sometimes 0, sometimes -(degree)))

   A   B   C   D
A  0   1
B  1   0
C          0
D              0

(symmetric for undirected graph)

Node-arc incidence matrix:
    (A,B) (A,C) ...
A
B
C
C

Exactly two ones in every column
Usually more edges than nodes -> more storage req'd

Directed node-arc rep:
 1 for flow-out
-1 for flow-in
All columns sum to zero --> unimodular matrix
-- not linearly independent
    --> cross off bottom row
        --> basis: tree (graph w/no cycles)
            fast pivots (network simplex method)
-- If this is only set of constraints, and RHS
    of constraints are integers, then you'll get
    an integer soln always

Paths

Discovered tree

Clique of a graph: subgraph that has all possible
edges (every node has an edge to every other node)
-- k_n, where n is # of nodes in clique
(complete graph)
# edges: C(n, 2)

Complement of a graph:
graph with same set of vertices, but with edges
where there weren't edges in original graph, and
the original edges removed.

Bipartite graph:
where vertices are partitioned into two sets, and
there are no edges between two nodes in the same
partition.
These come up in transportation models a lot--
-- sources vs. destinations
-- assignment problems: tasks to workers...
-- no odd cycles

Matching problem:
-- sum[i]( x_ij ) <= 1 forall j
-- sum[j]( x_ij ) <= 1 forall i

Node packing problem:
find a set of nodes of maximum cardinality such that
no node is incident with the same edge (or arc)

Set packing problem:
Given a universe U and a family S of subsets of U,
find a collection C of sets in S, whose cardinality is
maximized, such that all sets in C are pairwise
disjoint.

O(f(n)), Omega(f(n)), Theta(f(n))
Polynomial-in-n time

Implicit enumeration of binary IP solutions:
exponential in # vars

NP: set of all problems whose solutions can be verified
in polynomial time
NP-complete: set of NP problems that can be transformed
into each other in polynomial time.
NP-hard: at least as hard as the hardest problems in NP
(don't have to be elements of NP)

IP are NP-complete problems

Two important sets in an IP:
-- Convex hull of feasible integer points
-- Region induced by the (linear relaxation of)
    the constraints

IP:
max c^T * x
s.t. Ax <= b
    x >= 0

Let P = { x in Z^n_+ : Ax <= b }
(countable set of points)
Let P_LR = { x in R^n_+ = Ax <= b }
    (linear relaxation set)
Let P_CH = convex hull of P

Every LP has an optimum, if it does, at an
extreme point/BFS/corner point

If we change the IP to:
max c^T * x
s.t. x in P_CH,
then an optimum will be at a corner point of
P_CH

Main idea: To LR, add a bunch of other constraints
such that we whittle the feasible region down in
this way such that we obtain corner points that
are integer --> cutting planes

P_CH and P_LR are polyhedra
{ x in R^n : Ax <= b }
* All polyhedra are convex.

Convex set that is not a polyhedron: circle

Adding cutting planes iteratively, it introduces
the risk of introducing degeneracy.

backwards-e == "such that"


Branch-and-bound for IP
=====
-- graphical
-- knapsack

0) Initialization: Create a search tree where the nodes are
LP relaxation problems. The tree starts with one node (the root),
which is the relaxation of the original LP.
Set Z*_ip = -inf.

While there exists at least one unfathomed leaf node:
-- Solve the LP relaxation of this node with solution
    z_LP and x_LP, then perform one of the following
    four steps:

1) If x_LP is integer, then an integer solution has been
found. If z_LP > z*_IP, then set z*_IP to z_LP and save
x_LP as the corresponding soln; fathom this node.

2) If z_LP <= z*_IP, then fathom this node (known as the
bounding portion).

3) If the LP relaxation is infeasible, then fathom this
node.

4) If z_LP >= z*_IP and x_LP is not integer, then there exists some
p < x_i < p+1 where p in Z. Create two new nodes to the tree;
these nodes are the children of the node that we are working on.
The LP relaxation problem for one of these child is the
LP relaxation of the parent with an additional constraint of
x_i <= p. The other child node also has the parent's LP relaxation
and includes the constraint x_i >= p + 1.

Can traverse the tree:
-- breadth-first
    -- left child first
    -- right child first
-- depth-first
    -- left child first
    -- right child first
-- best child
-- best bound

What var to branch on?
-- for exam: choose lowest index candidate var

Need to be able to traverse from leaf thru ancestry,
to pick up all the constraints

Track basis, z-value, ...

Running time for a branch-and-bound IP algo:
-- # branches gets large quickly
-- # nodes at level n: 2^n

0-1 knapsack problems:
max c^T * x
s.t. a^t * x <= b
    x in {0, 1}^n
    a >= 0

e.g.
max 5x_1 + 8x_2 + 12x_3 + 6x_4 + 3x_5
s.t. x_1 + 2x_2 + 4x_3 + 3x_4 + 3x_5 <= 9
    x_i in {0, 1}

c = values of items
a = weights of items
b = capacity of knapsack

2^n candidate solutions.

dual:
min 9y
s.t. y >= 5
     2y >= 8
     4y >= 12
     3y >= 6
     3y >= 3
     y >= 0

min ratio test: c_i/a_i

Add bounds between 0 and 1 on all the x_i.
Pivot on x_1 (max c_i/a_i)

z   x_1   x_2   x_3   x_4   x_5   s_i  RHS
==========================================
1    -5   -8    -12    -6    -5    0    0
0     1    2      4     3     3    1    9
   add constraint
      1                                 1

Set x_1 to upper bound, 1.
z now 5
Now move x_2 to its upper bound, 1
z now 13
...

greedily choosing stuff with best value/weight ratio
until you have to take a fractional amount, or you're
at (integer) capacity

If something's at its upper bound, negative is OK in
objective row of tableau; if at its lower bound, positive
OK.

If upper bound is lower than ratio test result, take
the upper bound as pivot

Branch-and-bound on above example, using best-child
strategy.

e.g.
max 5x_1 + 8x_2 + 12x_3 + 6x_4 + 3x_5
s.t. x_1 + 2x_2 + 4x_3 + 3x_4 + 3x_5 <= 9
    x_i in {0, 1}

Node root)
(1, 1, 1, 2/3, 0)
z = 29

Branch: node 1) x_4 <= 0 vs. node 2) x_4 >= 1

Best child:
Node 1): z = 27 (1, 1, 1, 0, 2/3)
Node 2): z = 28 (1, 1, 3/4, 1, 0)

Node 2 is best since z is greater.
Branch from here: node 3) x_3 <= 0, node 4) x_3 >= 1
Node 3): z = 22 (1, 1, 0, 1, 1)
    --> z_best = 22
Node 4): z = 27 (1, 1/2, 1, 1, 0)
Best child is a tie, choose node 5) for branch
Node 6):
...

Branching on non-fractional vars?

Choosing between vars to branch on?
-- HW: "cheat". Find whatever amounts to less work.


Advanced branching strategies:
With an IP of 100 vars, branching tree could get
to be 2^100 nodes

Best-child advantageous re: intelligently pruning
search space.

DFS advantageous re: memory management
randomly choose left/right

BFS: memory problems

Best-child: sorting children. Priority queue

The shape of the problem matters.
1) Feasibility problem
2) Optimality problem
3) Mixture of 1) and 2)

Random diving

-- If A and b are rational
-- If there is a feasible integer point
-- If LP unbounded
-- Then IP is unbounded

Pseudo-branching:

We would be branching on a basic var; never
a non-basic var (NBV would always be zero, an integer)

We know based on the reduced costs of NBV, which vars are
doing more or less harm in achieving optimality.

What if we branched on a BV based on some estimate of
reduced cost --> Pseudo-cost.

Gets a broader separation, where one child of the branch
improves a lot, the other doesn't --> hopefully fathom
larger chunk of tree.

No silver bullet, that will work well on every problem.

Strong branching:
-- n vars, assume they're binary; bad reduced costs
    call that set of vars S

root: branch on sum[x_i in S](x_i) = 0, and on
    sum[x_i in S](x_i) >= 1

Hopefully fathom one side or another quickly.

Or:
root: branch on sum[x_i in S](x_i) = n, and on
    sum[x_i in S](x_i) <= n - 1
where n is |S|

-- branch on var least close to integer
(CPLEX default)
    -- depends on the problem
        -- feasibility vs. optimality

Rules for branching:
1) Between all children, no feasible integer points
eliminated
2) Must remove linear relaxation of parent
3) Must eventually terminate with only integer
    extreme points
    -- End at a single integer point

Branching on polyhedra:
-- Each node with four children:
-- Only works for integer problems, not binary

Easton: Branching: easier and better than many other
techniques for solving IP
-- Sometimes helpful to invent hand-rolling branching
strategy for solving specific problems


Column generation:
When LP/IP has way more variables than constraints
-- Comes up a lot in crew scheduling problems

Idea: take the problem, cut it down to some reasonable
size involving fewer vars; introduce new columns as you
go
-- Don't add variables that would never pivot in

The overarching idea is that many linear programs are too large
to consider all the variables explicitly. Since most of the
variables will be non-basic and assume a value of zero in the
optimal solution, only a subset of variables need to be considered
in theory when solving the problem. Column generation leverages
this idea to generate only the variables which have the potential
to improve the objective function -- that is, to find variables
with negative reduced cost (assuming without loss of generality that
the problem is a minimization problem).

The problem being solved is split into two problems:
the master problem and the subproblem. The master problem is
the original problem with only a subset of variables being considered.
The subproblem is a new problem created to identify a new variable.
The objective function of the subproblem is the reduced cost of
the new variable with respect to the current dual variables,
and the constraints require that the variable obey the naturally
occurring constraints.

The process works as follows. The master problem is solved --
from this solution, we are able to obtain dual prices for each of
the constraints in the master problem. This information is then
utilized in the objective function of the subproblem.
The subproblem is solved. If the objective value of the subproblem
is negative, a variable with negative reduced cost has been
identified. This variable is then added to the master problem,
and the master problem is re-solved. Re-solving the master problem
will generate a new set of dual values, and the process is repeated
until no negative reduced cost variables are identified.
The subproblem returns a solution with non-negative reduced cost,
we can conclude that the solution to the master problem is optimal.

e.g. Cutting stock problem.
Lots of wood planks of a particular length.
How to cut it into pieces of the desired lengths so as to
minimize the number of boards I need to cut

n pieces of wood, 52 ft. long.
Need pieces 6 ft., 8 ft., 10 ft. long

Demand for 6-ft pieces: 120
        8-ft          : 54
        10-ft         : 60

Let x_i = # of boards of type i, where I make a certain
set of cuts on the board

min x_1 + x_2 + x_3
s.t.
8x_1 + 0x_2 + 0x_3 = 120
0x_1 + 6x_2 + 0x_3 = 54
0x_1 + 0x_2 + 5x_3 = 60

current soln: (15, 9, 12)

Revised simplex tableau:

 c_B^T * B^(-1) * A_j - c_j  | c_B^T * B^(-1) * b
-------------------------------------------------
    A_j * B^(-1)             | B^(-1) * b

B^(-1) = [8 0 0; 0 6 0; 0 0 5]^(-1)
       = [1/8 0 0; 0 1/6 0; 0 0 1/5]
z = 36

Column gen: treat those as ridiculous cuts.
a) What about 3 6ft, 3 8ft, 1 10ft from each board?
b) What about 4 6ft, 0 8ft, 2 10ft from each board?

To decide whether such a new cut would be beneficial,
calc the reduced costs (c_B^T * B^(-1) * A_j - c_j)...
if it's making the cost cheaper, add it in.

(1 board added in each; cost of new column therefore == 1)
a) (1 1 1)[1/8 0 0; 0 1/6 0; 0 0 1/5] * [3 3 1] - 1
   = 43/40 - 1 = 3/40
b) -1/10

a) better:

min x_1 + x_2 + x_3 + x_4
s.t.
8x_1 + 0x_2 + 0x_3 + 3x_4 = 120
0x_1 + 6x_2 + 0x_3 + 3x_4 = 54
0x_1 + 0x_2 + 5x_3 +  x_4 = 60

Keep pricing in other columns, eliminate others

Branch-and-price: essentially column gen for IP
Start B-and-B tree at root node with LR of reduced problem
At node further down, you either have:
-- integer
   -- update z_IP; you now have a B^(-1)
   -- add columns
-- fractional
   -- < z_IP
       -- add columns
   -- >= z_IP
       -- branch
-- infeasible
   -- add columns

check out the slack for a given solution -- target reducing
these on column gen decisions

Matching in a graph:
set of edges such that there is at most one edge
adjacent to every node

Bipartite graphs cannot have odd cycles

Clique k_m in a graph is a complete subgraph of a graph,
whose number of vertices = m
-- # edges: C(m, 2)

Independent set of vertices:
-- Select vertices such that no two vertices are
    adjacent.

Packing, covering


IP modeling:
HW2:
-- problem 1, do it in Excel
-- problem 2, do it in whatever
-- problem 3, do it in whatever
    -- a) minimize sum of all completion times
        -- shortest processing time first
    -- b) minimize max finish time
-- problem 4, do it in whatever
-- problem 5, do in in OPL

Modeling TSP:
-- n cities
-- distances between each city pair (i, j)
-- Visit all the cities once so as to minimize
    the total distance traveled.

One possible formulation:
Decision vars:
1) x_ij = 1 if tour includes arc from i to j
        = 0 else
2) x_ik = 1 if city i is the k'th city on the tour
        = 0 else
3) x_ijk = 1 if city i is the (k-1)'th city and
    city j is the k'th city.
         = 0 else

Example tour with five cities: 1-2-3-5-4-1

3) constraints:
     Above, we have x_121 = 1,
     x_232 = 1,
     x_353 = 1,
     x_544 = 1
     x_415 = 1

# There is only one k'th arc in the tour
* sum[i, j]( x_ijk ) = 1, forall k

# No self-visits
* x_iik = 0, forall i, k     # n^2 constraints
    With one constraint: sum[i, k]( x_iik ) = 0

# One exit out of each city
* sum[j, k]( x_ijk ) = 1, forall i

# One entry into each city
* sum[i, k]( x_ijk ) = 1, forall j

# Start and end at node 1
* sum[j]( x_ij1 ) = 1,
    sum[]( x_i1n ) = 1

# Flow-in == flow-out at each node
...?


2) constraints
    Above, we have x_11 = 1
        x_22 = 1
        x_33 = 1
        x_54 = 1
        x_45 = 1
        x_16 = 1

# Exactly one city is the k'th city
sum[i]( x_ik ) = 1, forall k

# Every city visited exactly once
sum[k]( x_ik ) = 1, forall i

Let d_ij = distance between cities i and j
Let var y_ij = 1 if cities i and j are adjacent in tour
     (i -> j)

# e.g.
x_11 = 1 /\ x_32 = 1 --> y_13 = 1
    # truth-table this for all vals to generalize

x_11   x_32   y_13
==================
  0     0      0
  0     0      1
  0     1      0
  0     1      1   x
  1     0      0
  1     0      1   x
  1     1      0   x
  1     1      1   <- forced

(1 - x_11) + x_32 + y_13 <= 2
x_11 + (1 - x_32) + y_13 <= 2
x_11 + x_32 + (1 - y_13) <= 2

# in general:
(1 - x_ik) + x_j_(k+1) + y_ij <= 2
    forall i, j; forall k s.t. k <= n - 1
x_ik + (1 - x_j_(k+1)) + y_ij <= 2
    forall i, j; forall k s.t. k <= n - 1
x_ik + x_j_(k+1) + (1 - y_ij) <= 2
    forall i, j; forall k s.t. k <= n - 1

min sum[i, j]( d_ij * y_ij )

Lots of constraints!


1) x_ij = 1 if tour includes arc from i to j
        = 0 else

min sum[i, j]( d_ij * x_ij )

# leave every node exactly once
sum[i]( x_ij ) = 1, forall i

# enter every node exactly once
sum[j]( x_ij ) = 1, forall j

# no self-visits
sum[i]( x_ii ) == 0, forall i

Subtours (e.g. 1-2-1, 3-4-5-3 out of cities {1, 2, 3, 4, 5})

-- Subtours satisfy the above constraints.
-- Must eliminate these possibilities.

e.g.
x_34 + x_45 + x_53 + x_43 + x_54 + x_35 <= 2

sum[i, j: i, j in {1..4}]( x_ij ) <= 3

# in general:
let S be a subset of nodes, 2 <= |S| <= floor(n/2)
sum[i in S]( sum[j in S] ( x_ij ) ) <= |S| - 1
    forall S subset-of V s.t. 2 <= |S| <= floor(n/2)
    # 2^(n-1) of these constraints!
    # find a soln without these, then add in subtour constraints

Lazy constraints:
-- those constraints that don't really contribute

Remove such constraints.
If you find a soln in the reduced-constraint problem,
you can test it against the lazy removed constraints;
if there are violations, need to add violated
constraints back to problem, and resolve.
Lots of constraints increase basis; more challenging
to solve.

With TSP, you have a zillion constraints (expo in #cities),
subtour constraints, etc...

Use these in problems with:
-- lots of constraints
-- fast method for identifying vios on constraints

Modeling: disjunctive constraints:
e.g. with integer vars:
    min (x - 2)^2
Hint: make it piecewise linear
Use a linear approximation for different slices of
the function

  x     f(x)
-------------
  0      4
  1      1
  2      0
  3      1
  4      4
  5      9

For x = 2.5, f(x) on the line between (2, 0) and (3, 1)
Convex combination: x = lambda * x_1 + (1 - lambda) * x_2
                  f(x) = lambda * f(x_1) + (1 - lambda) * f(x_2)

Lambdas for each piecewise segment:
    lambda_0, ..., lambda_5

lambda_i >= 0
sum[i]( lambda_i ) == 1

to get to f(2.5):

min 4 * lambda_0 + 1 * lambda_1 + 0 * lambda_2
    + 1 * lambda_3 + 4 * lambda_4 + 9 * lambda_5
s.t. the above.

But, do extra to ensure that you get only
two non-negative lambdas.

Add binary vars u_1, ..., u_5, so that
u_1 sits between lambda_0 and lambda_1....

sum[i]( u_i ) == 1

e.g. lambda_0, lambda_1, u_1
0     0    0   --> ok
0     0    1   --> x
0    >0    0   --> ok
0    >0    1   --> ok
>0    0    0   --> ok
>0    0    1   --> x
>0   >0    0   --> x
>0   >0    1   --> ok

how to express a constraint that captures this truth table?
(1 - lambda_i) + (1 - lambda_(i+1)) + u_i <= 2

Useful for expressing nonlinear constraints, objective
as if they were linear.

e.g. sports scheduling
Double robin-round tournament
n teams, 2n - 2 slots

Kansas State
West Virginia
Texas Tech

Decision vars:
The solution looks like "team t comes to facility f
to play at time t"
Let x_ijk = 1 if team i plays at team j in slot k

e.g. x_{tt,ksu,12} = 1

constraints:
# Every slot has enough games
sum[i, j]( x_ijk ) = n/2, forall k

# Every team occupies right number of slots
sum[j]( x_ijk ) + sum[j]( x_jik ) = 1
    forall k, forall i
(obviates first constraint)








































.
